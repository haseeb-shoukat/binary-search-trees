(()=>{"use strict";const e=class{constructor(e=null,t=null,r=null){this.value=e,this.rightNode=t,this.leftNode=r}};!function(){const t=new class{constructor(e=[]){this.root=this.buildTree([...new Set(e.sort((function(e,t){return e-t})))])}buildTree(t){if(t.length<1)return null;let r=Math.floor((t.length-1)/2);return new e(t[r],this.buildTree(t.slice(r+1)),this.buildTree(t.slice(0,r)))}insert(e){this.root=this.#e(e,this.root)}#e(t,r){return r?(t<r.value?r.leftNode=this.#e(t,r.leftNode):r.rightNode=this.#e(t,r.rightNode),r):new e(t)}delete(e){this.root=this.#t(e,this.root)}#t(e,t){if(!t)return null;if(t.value===e){if(!t.rightNode)return t.leftNode?t.leftNode:null;if(!t.leftNode)return t.rightNode;let e=this.#r(t.rightNode);return t.value=e,t.rightNode=this.#t(e,t.rightNode),t}return e<t.value?t.leftNode=this.#t(e,t.leftNode):t.rightNode=this.#t(e,t.rightNode),t}#r(e){return e.leftNode?this.#r(e.leftNode):e.value}find(e){let t=this.root;for(;t;){if(t.value==e)return t;t=e>t.value?t.rightNode:t.leftNode}return!1}levelOrder(e=function(e){return e.value}){let t=[];if(!this.root)return t;let r=[this.root];for(;0!=r.length;){let o=r[0];t.push(e(o)),o.leftNode&&r.push(o.leftNode),o.rightNode&&r.push(o.rightNode),r.shift()}return t}levelOrderRec(e=function(e){return e.value}){let t=this.root;if(!t)return[];let r=this.#o([t],e);return r.pop(),r}#o(e,t){if(!e[0])return;let r=t(e[0]);return e[0].leftNode&&e.push(e[0].leftNode),e[0].rightNode&&e.push(e[0].rightNode),e.shift(),[r].concat(this.#o(e,t))}inorder(e=function(e){return e.value}){let t=this.root;return t?this.#i(t,e):[]}#i(e,t){let r=[];return e.leftNode&&r.push(...this.#i(e.leftNode,t)),r.push(t(e)),e.rightNode&&r.push(...this.#i(e.rightNode,t)),r}preorder(e=function(e){return e.value}){let t=this.root;return t?this.#l(t,e):[]}#l(e,t){let r=[];return r.push(t(e)),e.leftNode&&r.push(...this.#l(e.leftNode,t)),e.rightNode&&r.push(...this.#l(e.rightNode,t)),r}postorder(e=function(e){return e.value}){let t=this.root;return t?this.#s(t,e):[]}#s(e,t){let r=[];return e.leftNode&&r.push(...this.#s(e.leftNode,t)),e.rightNode&&r.push(...this.#s(e.rightNode,t)),r.push(t(e)),r}height(e){let t=0,r=0;return e?(e.rightNode&&(t=this.height(e.rightNode)+1),e.leftNode&&(r=this.height(e.leftNode)+1),t>r?t:r):0}depth(e){if(!this.root)return depth;let t=[[this.root,0]];for(;0!=t.length;){let[r,o]=t[0];if(JSON.stringify(e)===JSON.stringify(r))return o;r.leftNode&&t.push([r.leftNode,o+1]),r.rightNode&&t.push([r.rightNode,o+1]),t.shift()}return-1}isBalanced(){return this.levelOrder((e=>{let t=this.height(e.rightNode)-this.height(e.leftNode);return t>=-1&&t<=1})).every((e=>e))}rebalance(){let e=this.inorder();this.root=this.buildTree(e)}}(function(e){let t=[];for(let e=0;e<12;e++)t.push(Math.floor(1e3*Math.random()));return t}());console.log("Tree is balanced?",t.isBalanced()),console.log("Level Order:"+JSON.stringify(t.levelOrder())),console.log("Pre Order:"+JSON.stringify(t.preorder())),console.log("In Order:"+JSON.stringify(t.inorder())),console.log("Post Order:"+JSON.stringify(t.postorder())),t.insert(120),t.insert(130),t.insert(150),t.insert(180),console.log("Tree is Balanced?",t.isBalanced()),t.rebalance(),console.log("Tree is Balanced?",t.isBalanced()),console.log("Level Order:"+JSON.stringify(t.levelOrder())),console.log("Pre Order:"+JSON.stringify(t.preorder())),console.log("In Order:"+JSON.stringify(t.inorder())),console.log("Post Order:"+JSON.stringify(t.postorder()))}()})();